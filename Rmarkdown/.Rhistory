knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets,    #--additional customisation for shiny elements
readxl,
viridis
)
#FUNCTIONS
#-".csv" extension remover, for variable list
ext_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
xls_remove <-
function(x){
substr(x, 1, nchar(x)-5)
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#-----#
#HIGHCHARTER() BAR PLOT FORMAT
barplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 450) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(shared = TRUE, crosshairs = TRUE, sort = TRUE)
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)
#vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, ext_remove)
#removing ".csv" file extension to create variable list, function above
)
#same concept reapplied for xlsx files, useful to separate the two
xlsx_dsets <- list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE)
xlsx_dsets <-
setNames(
lapply(xlsx_dsets, read_xlsx),
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = FALSE), xls_remove)
)
#final dsets vectors contains variables associated w/ respective dataset:
#-global edits done to reduce variable names, since discarded data not required.
#-method flexible to increases, decreases or variations in order to dataset directory.
#CLEAN SUPPLY DATASETS
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`)%>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume` = `Retail Value RSP` / `Retail Volume (Tonnes)`)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]] %>%
select(-Country, -Category, -Unit) %>%
filter(complete.cases(.))
clean_enterprise_n <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Enterprise Number`) %>%
filter(complete.cases(.)) %>%
mutate(Year = as.numeric(Year), `Enterprise Number` = as.numeric(`Enterprise Number`))
clean_employee_n <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Persons Employed`) %>%
filter(complete.cases(.))
clean_val_added <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Value Added Millions`) %>%
filter(complete.cases(.))
clean_op_surplus <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Gross Operating Surplus Million Euro`) %>%
filter(complete.cases(.))
clean_wages <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Wages and Salaries`) %>%
filter(complete.cases(.))
clean_investment <-
xlsx_dsets[["portugal_dsets_estat"]] %>%
select(Year, `Investment Rate`) %>%
filter(complete.cases(.)) %>%
mutate(Year = as.numeric(Year), `Investment Rate` = as.numeric(`Investment Rate`))
clean_volume_price %>% hchart("line", hcaes(`Retail Volume (Tonnes)`, `Price/Volume`, name= Year)) %>%
hc_title(text = "Average Price - Ratio between Sale Revenue and Production Volume") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Average Price [€]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + ' €';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Snack Retail Volume [000 tonnes]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + 'k';
}
}")
)) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Average Price: {point.y:.1f} €<br>Retail Volume: {point.x:.f}k tonnes<br>Retail Value RSP: {point.Retail Value RSP:.1f} mil €"
) %>%
hc_caption(
text = "<b>Retail Sale Revenue/Volumes</b> = relationship expressing the average price of snacks for a given year, total revenue divided by volumes sold at retail level.",
style = list(marginTop = "0px")
)
clean_volume_price %>% filter(Geography == "Portugal")
clean_volume_price <- clean_volume_price %>% filter(Geography == "Portugal")
clean_volume_price %>% hchart("line", hcaes(`Retail Volume (Tonnes)`, `Price/Volume`, name= Year)) %>%
hc_title(text = "Average Price - Ratio between Sale Revenue and Production Volume") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Average Price [€]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + ' €';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Snack Retail Volume [000 tonnes]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + 'k';
}
}")
)) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Average Price: {point.y:.1f} €<br>Retail Volume: {point.x:.f}k tonnes<br>Retail Value RSP: {point.Retail Value RSP:.1f} mil €"
) %>%
hc_caption(
text = "<b>Retail Sale Revenue/Volumes</b> = relationship expressing the average price of snacks for a given year, total revenue divided by volumes sold at retail level.",
style = list(marginTop = "0px")
)
clean_enterprise_n %>% hchart("line", hcaes(Year, `Enterprise Number`)) %>%
hc_title(text = "Number of Enterprises") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>N° Enterprises</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 1000) {
return (this.value/1000) + 'k';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>N° Enterprises: {point.y:.f}"
) %>%
hc_caption(
text = "<b>Active Enterprises</b> = number of enterprises active in the food manufacture market in a given year.",
style = list(marginTop = "0px")
)
clean_employee_n %>% hchart("line", hcaes(Year, `Persons Employed`)) %>%
hc_title(text = "Number of Employees") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>N° Employees</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 1000) {
return (this.value/1000) + 'k';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>N° Employees: {point.y:.f}"
) %>%
hc_caption(
text = "<b>N° Employees</b> = number of employees working for enterprises active in the food manufacture market in a given year.",
style = list(marginTop = "0px")
)
clean_val_added %>% hchart("line", hcaes(Year, `Value Added Millions`)) %>%
hc_title(text = "Value Added through Production [mil €]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Value Added [mil €]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + ' mil €';
} else if (this.value >= 1000) {
return (this.value/1000) + ' bil €'
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Value Added: {point.y:.f} mil €"
) %>%
hc_caption(
text = "<b>Value Added through Production</b> = increase in value brought by a production process, quantifiable as the difference between its sale price and the cost of its relative production factors, across all enterprises for a given year.",
style = list(marginTop = "0px")
)
clean_op_surplus %>% hchart("line", hcaes(Year, `Gross Operating Surplus Million Euro`)) %>%
hc_title(text = "Gross Operating Surplus [mil €]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Gross Operating Surplus [mil €]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + ' mil €';
} else if (this.value >= 1000) {
return (this.value/1000) + ' bil €'
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Gross Operating Surplus: {point.y:.f} mil €"
) %>%
hc_caption(
text = "<b>Gross Operating Surplus</b> = enterprise profit on goods and services produced considering labour costs, subset of total profits indicating the weight of the labour production factor across enterprises for a given year.",
style = list(marginTop = "0px")
)
clean_wages %>% hchart("line", hcaes(Year, `Wages and Salaries`)) %>%
hc_title(text = "Aggregate Labour Cost [mil €]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Aggregate Labour Cost [mil €]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + ' mil';
} else if (this.value >= 1000) {
return (this.value/1000) + ' bil'
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Aggregate Labour Cost: {point.y:.f} mil €"
) %>%
hc_caption(
text = "<b>Aggregate Labour Cost</b> = cost of labour, aggregate corporate expenditure in wages and salaries in a given year.",
style = list(marginTop = "0px")
)
clean_investment %>% hchart(., "line", hcaes(x = Year, y = `Investment Rate`)) %>%
hc_title(text = "Investment Rate [%]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Investment Rate [%]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value) {
return (this.value) + '%';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Investment Rate: {point.y:.f}%"
) %>%
hc_caption(
text = "<b>Investment Rate</b> = ratio between gross tangible investment to net value added, measure of conversion of investments into tangible profit, in the food manufacture sector for a given year.",
style = list(marginTop = "0px")
)
clean_company_shares %>% slice(1:10) %>%
pivot_longer(cols = -Company,
names_to = "Year",
values_to = "Value"
) %>%
filter(Value != "-") %>%
mutate(Year = as.numeric(Year), Value = as.numeric(Value)) %>%
group_by(Year) %>%
summarize(Mean_Value = mean(Value, na.rm = TRUE))
clean_company_shares <- clean_company_shares %>% slice(1:10) %>%
pivot_longer(cols = -Company,
names_to = "Year",
values_to = "Value"
) %>%
filter(Value != "-") %>%
mutate(Year = as.numeric(Year), Value = as.numeric(Value)) %>%
group_by(Year) %>%
summarize(Mean_Value = mean(Value, na.rm = TRUE))
clean_company_shares %>% hchart("line", hcaes(Year, Mean_Value)) %>%
hc_title(text = "Average Share Value [%]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Average Share Value [%]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 1000) {
return (this.value/1000) + 'k';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Average Share Value: {point.y:.1f}%"
) %>%
hc_caption(
text = "<b>N-Indexed Average Share Value</b> = average value of the first n companies' share, in terms of market size.<br>Share value expressed as percentage of total market value, indicator of relative wealth of n selected companies, in particular when n < 10.",
style = list(marginTop = "0px")
)
clean_company_shares %>% hchart("line", hcaes(Year, Mean_Value)) %>%
hc_title(text = "Average Share Value [% - top 10 companies]") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(
text="<b>Average Share Value [%]</b>",
align="middle"
),
labels = list(
formatter = JS("function() {
if (this.value >= 1000) {
return (this.value/1000) + 'k';
}
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Average Share Value: {point.y:.1f}%"
) %>%
hc_caption(
text = "<b>N-Indexed Average Share Value</b> = average value of the first 10 companies' share, in terms of market size.<br>Share value expressed as percentage of total market value, indicator of relative wealth of n selected companies, in particular when n < 10.",
style = list(marginTop = "0px")
)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]] %>%
select(-Country, -Category, -Unit) %>%
filter(complete.cases(.))
clean_company_shares <- clean_company_shares %>% slice(1:10) %>%
pivot_longer(cols = -Company,
names_to = "Year",
values_to = "Value"
) %>%
filter(Value != "-", Company != "Total") %>%
mutate(Year = as.numeric(Year), Value = as.numeric(Value)) %>%
pivot_wider(names_from = Company, values_from = Value)
temp <- clean_company_shares
hc_data <-
lapply(
names(temp)[-1],
function(company) {
list(name = company, data = as.numeric(temp[[company]]))
}
)
highchart() %>%
hc_chart(type = "column") %>%
hc_title(text = "Market Concentration [%]") %>%
hc_plotOptions(column = list(stacking = "normal")) %>%
hc_add_series_list(hc_data) %>%
barplot_custom(.) %>%
hc_xAxis(categories = temp$Year) %>%
hc_yAxis(title = list(text = "<b>Aggregate Share Value [%]</b>", align = "middle"),
min = 0,
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + '%';
}
}")
)
) %>%
hc_colors(colorRampPalette(c("#db240c", "#046A38", "#FFE900"))(input$supply_company_index_slider[2])) %>%
hc_caption(
text = "<b>N-Indexed Market Concentration</b> = sum of share value of the first n companies, share value expressed in terms of % of total market value.<br>Indicative of market concentration, the greater the value for small n, the more tendentially monopolistic the market.",
style = list(marginTop = "0px"))
highchart() %>%
hc_chart(type = "column") %>%
hc_title(text = "Market Concentration [%]") %>%
hc_plotOptions(column = list(stacking = "normal")) %>%
hc_add_series_list(hc_data) %>%
barplot_custom(.) %>%
hc_xAxis(categories = temp$Year) %>%
hc_yAxis(title = list(text = "<b>Aggregate Share Value [%]</b>", align = "middle"),
min = 0,
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + '%';
}
}")
)
) %>%
hc_colors(colorRampPalette(c("#db240c", "#046A38", "#FFE900"))(10)) %>%
hc_caption(
text = "<b>N-Indexed Market Concentration</b> = sum of share value of the first n companies, share value expressed in terms of % of total market value.<br>Indicative of market concentration, the greater the value for small n, the more tendentially monopolistic the market.",
style = list(marginTop = "0px"))
highchart() %>%
hc_chart(type = "column") %>%
hc_title(text = "Market Concentration [%]") %>%
hc_plotOptions(column = list(stacking = "normal")) %>%
hc_add_series_list(hc_data) %>%
barplot_custom(.) %>%
hc_xAxis(categories = temp$Year) %>%
hc_yAxis(title = list(text = "<b>Aggregate Share Value [%]</b>", align = "middle"),
min = 0,
labels = list(
formatter = JS("function() {
if (this.value >= 0) {
return (this.value) + '%';
}
}")
)
) %>%
hc_colors(colorRampPalette(c("#db240c", "#046A38", "#FFE900"))(10)) %>%
hc_caption(
text = "<b>N-Indexed Market Concentration</b> = sum of share value of the first 10 companies, share value expressed in terms of % of total market value.<br>Indicative of market concentration, the greater the value for small n, the more tendentially monopolistic the market.",
style = list(marginTop = "0px"))
