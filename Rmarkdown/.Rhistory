df <-  write_csv(df, "tps00001")
View(df)
df <- get_eurostat("tps00001", time_format = "num")
df <-  write_csv(df, "tps00001")
df <-
get_eurostat("tps00001", time_format = "num") %>%
write_csv(., "tps00001")
View(hp_factors)
---
title: "Portugal Market Analysis"
a <- ("ITA", "ITA", "SPA", "POR")
a <- c("ITA", "ITA", "SPA", "POR")
unique(a)
for(i in unique(a)){
print(i)
}
parallel_series_colours <- c("Portugal" = "#db240c", "Italy" = "#046A38", "Spain" = "#FFE900")
parallel_series_colours["Italy"]
library("highchart")
install.packages("highchart")
library("highchart")
hc <- highchart()
data <- data.frame(c("a", "b", "c"), c(1, 2, 3))
data[,1]
data[1,]
data[1]
data[1;1]
data[1,1]
data <- data.frame(c("a", "b", "c"), c(1, 2, 3))
data
data <- data.frame(("a", "b", "c"), (1, 2, 3))
#CLEAN PARALLELS DATASETS
economic_factor_choice <-
c("Nominal GDP", "Consumer Price Index", "Real GDP", "Real GDP Growth Rate", "Unemployment Rate", "Inflation Rate")
# Chunk 1: SETUP
#GENERAL CODE CHUNK SETUP
knitr::opts_chunk$set(echo = FALSE, message=FALSE)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#PACKAGE INSTALLATION AND LOADING
#-the essential packages required to load the document are markdown, knitr, flexdashboard and pacman.
#-the following code checks for their installation, installing them if required, and proceeds
#-to install/load other necessary packages.
if(!require("markdown")) install.packages("markdown")
if(!require("knitr")) install.packages("knitr")
if(!require("flexdashboard")) install.packages("flexdashboard")
if(!require("pacman")) install.packages("pacman")
#--pacman function essential for loading and installing (if not already installed) packages together
pacman::p_load(
knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets,    #--additional customisation for shiny elements
readxl
)
#FUNCTIONS
#-".csv" extension remover, for variable list
csv_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
#-----#
xls_remove <-
function(x){
substr(x, 1, nchar(x)-5)
}
#-----#
#HIGHCHARTER() SCATTERPLOT FORMAT
scplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(., width=80, height=310) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>X: {point.x:.1f}%<br>Y: {point.y:.2f}") %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}/10"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}%"),
lineColor="#ecf0f1") %>%
hc_plotOptions(., scatter=list(color="#db240c"))
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)   #vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, csv_remove)
#removing ".csv" file extension to create variable list, function above
)
xls_dsets <- list.files(path="./Datasets", pattern = "*.xlsx", full.names = FALSE)   #vector with file names
xls_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE), read_excel),
lapply(xls_dsets, xls_remove)
)
#final dsets vector contains variables associated w/ respective dataset:
#-global edits done to reduce variable names, since discarded data not required.
#-method flexible to increases, decreases or variations in order to dataset directory.
clean_life_expectancy <-
dsets[["portugal_life_expectancy"]] %>%
filter(Year >= 1800 & Entity == "Portugal" & Year <= 2023) %>%
select(-Code, -Entity) %>%
rename(`Life Expectancy` = Period.life.expectancy.at.birth...Sex..all...Age..0) %>%
hchart("line", hcaes(`Year`, `Life Expectancy`)) %>%
hc_title(text = "Portuguese Life Expectancy") %>%
lnplot_custom(.) %>%
hc_yAxis(title = list(text = "<b>Life Expectancy  [yrs]</b>", align = "middle")) %>%
hc_xAxis(title = list(text = "<b>Year</b>", align = "middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Life Expectancy: {point.y:.1f} years") %>%
hc_caption(
text = "<b>Life Expectancy</b> = metric that summarizes death rates across all age groups in one particular year.",
style = list(marginTop = "0px")
)
clean_life_expectancy
clean_calorie_supply <-
dsets[["portugal_daily_caloric_supply"]] %>%
filter(Year >= 1800 & Entity == "Portugal" & Year <= 2023) %>%
select(-Code, -Entity) %>%
rename(`Daily Calorie Supply` = Daily.calorie.supply.per.person) %>%
hchart("line", hcaes(`Year`, `Daily Calorie Supply`)) %>%
hc_title(text = "Portuguese Daily Calorie Supply") %>%
hc_yAxis(title = list(text = "<b>Average Daily Calorie Supply [kcal]</b>", align = "middle")) %>%
hc_xAxis(title = list(text = "<b>Year</b>", align = "middle")) %>%
lnplot_custom(.) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Average Daily Calorie Supply: {point.y:.1f} kcal") %>%
hc_caption(
text = "<b>Per Capita Daily Calorie Supply</b> = amount of calories available to an average person, not   necessarily the calories actually consumed by that person.",
style = list(marginTop = "0px")
)
clean_calorie_supply
economics_nom_gdp <-
dsets[["portugal_gdp_constant"]] %>%
filter(Entity == "Portugal") %>%
select(-Code, -Entity) %>%
rename(`Nominal GDP` = GDP..constant.2015.US..)
economics_nom_gdp %>% hchart("line", hcaes(`Year`, `Nominal GDP`)) %>%
hc_title(text = "Portuguese Nominal GDP") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Nominal GDP [int $]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 1000000000) {
return (this.value/1000000000) + ' bil';
} else if (this.value >= 1000000) {
return (this.value / 1000000) + ' mil';
} else if (this.value >= 1000) {
return (this.value / 1000) + ' k';
}
return this.value;
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Nominal GDP: {point.y:,.0f} int $") %>%
hc_caption(
text = "<b>Nominal GDP</b> = value expressing the amount of goods and services that are produced and sold through markets, at a given time, calculated using current prices.",
style = list(marginTop = "0px")
)
economics_nom_gdp <-
dsets[["portugal_gdp_constant"]] %>%
filter(Entity == "Portugal") %>%
select(-Code, -Entity) %>%
rename(`Nominal GDP` = GDP..constant.2015.US..)
economics_cpi <-
dsets[["portugal_consumer_price_index"]] %>%
filter(Entity == "Portugal") %>%
select(-Code, -Entity) %>%
rename(`Consumer Price Index` = Consumer.price.index..2010...100.)
economics_rgdp <-
merge(economics_nom_gdp, economics_cpi, by = "Year") %>%
mutate(`Real GDP` = (`Nominal GDP`/`Consumer Price Index`)*100) %>%
select(Year, `Real GDP`)
economics_rgdp %>% hchart("line", hcaes(`Year`, `Real GDP`)) %>%
hc_title(text = "Portuguese Real GDP") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Real GDP [int $]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 1000000000) {
return (this.value/1000000000) + ' bil';
} else if (this.value >= 1000000) {
return (this.value / 1000000) + ' mil';
} else if (this.value >= 1000) {
return (this.value / 1000) + ' k';
}
return this.value;
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Real GDP: {point.y:,.0f} int $"
) %>%
hc_caption(
text = "<b>Real GDP</b> = value expressing the amount of goods and services that are produced and sold through markets, at a given time, adjusted for constant prices using a deflator, the yearly consumer price index.",
style = list(marginTop = "0px")
)
economics_rgdp %>% hchart("line", hcaes(`Year`, `Real GDP`)) %>%
hc_title(text = "Portuguese Real GDP") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Real GDP [int $]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 1000000000) {
return (this.value/1000000000) + ' bil';
} else if (this.value >= 1000000) {
return (this.value / 1000000) + ' mil';
} else if (this.value >= 1000) {
return (this.value / 1000) + ' k';
}
return this.value;
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Real GDP: {point.y:,.0f} int $"
) %>%
hc_caption(
text = "<b>Real GDP</b> = value expressing the amount of goods and services that are produced and sold through markets, at a given time, adjusted for constant prices using a deflator, the yearly consumer price index.",
style = list(marginTop = "0px")
)
economics_rgdp %>% hchart("line", hcaes(`Year`, `Real GDP`)) %>%
hc_title(text = "Portuguese Real GDP") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Real GDP [int $]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 1000000000) {
return (this.value/1000000000) + ' bil';
} else if (this.value >= 1000000) {
return (this.value / 1000000) + ' mil';
} else if (this.value >= 1000) {
return (this.value / 1000) + ' k';
}
return this.value;
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Real GDP: {point.y:,.0f} int $"
) %>%
hc_caption(
text = "<b>Real GDP</b> = value expressing the amount of goods and services that are produced and sold through markets, at a given time, adjusted for constant prices using a deflator, the yearly consumer price index.",
style = list(marginTop = "0px")
)
economics_unemployment <-
dsets[["portugal_unemployment_rate"]] %>%
select(-Code) %>%
filter(Entity == "Portugal") %>%
rename(`Unemployment Rate` = Unemployment..total....of.total.labor.force...modeled.ILO.estimate.)
economics_inflation <-
dsets[["portugal_inflation"]] %>%
select(-Code) %>%
filter(Entity == "Portugal") %>%
rename(`Inflation Rate`= Inflation..consumer.prices..annual...)
economics_unemployment %>% hchart("line", hcaes(`Year`, `Unemployment Rate`)) %>%
hc_title(text = "Portuguese Unemployment Rate") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Unemployment Rate [%]</b>", align="middle")) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Unemployment Rate: {point.y:.1f}%") %>%
hc_caption(
text = "<b>Unemployment Rate</b> = percentage of the labour force that cannot find occupation within a short time span.",
style = list(marginTop = "0px")
)
economics_rgdp %>% hchart("line", hcaes(`Year`, `Real GDP`)) %>%
hc_title(text = "Portuguese Real GDP") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Real GDP [int $]</b>", align="middle"),
labels = list(
formatter = JS("function() {
if (this.value >= 1000000000) {
return (this.value/1000000000) + ' bil';
} else if (this.value >= 1000000) {
return (this.value / 1000000) + ' mil';
} else if (this.value >= 1000) {
return (this.value / 1000) + ' k';
}
return this.value;
}")
)
) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Real GDP: {point.y:,.0f} int $"
) %>%
hc_caption(
text = "<b>Real GDP</b> = value expressing the amount of goods and services that are produced and sold through markets, at a given time, adjusted for constant prices using a deflator, the yearly consumer price index.",
style = list(marginTop = "0px")
)
economics_inflation %>% hchart("line", hcaes(`Year`, `Inflation Rate`)) %>%
hc_title(text = "Portuguese Inflation Rate") %>%
lnplot_custom(.) %>%
hc_yAxis(title=list(text="<b>Inflation Rate [%]</b>", align="middle")) %>%
hc_xAxis(title=list(text="<b>Year</b>", align="middle")) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>Year: {point.x:.f}<br>Inflation Rate: {point.y:.1f}%") %>%
hc_caption(
text = "<b>Inflation Rate</b> = rate of growth of a price index over time.",
style = list(marginTop = "0px")
)
# Chunk 1: SETUP
#GENERAL CODE CHUNK SETUP
knitr::opts_chunk$set(echo = FALSE, message=FALSE)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#PACKAGE INSTALLATION AND LOADING
#-the essential packages required to load the document are markdown, knitr, flexdashboard and pacman.
#-the following code checks for their installation, installing them if required, and proceeds
#-to install/load other necessary packages.
if(!require("markdown")) install.packages("markdown")
if(!require("knitr")) install.packages("knitr")
if(!require("flexdashboard")) install.packages("flexdashboard")
if(!require("pacman")) install.packages("pacman")
#--pacman function essential for loading and installing (if not already installed) packages together
pacman::p_load(
knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets,    #--additional customisation for shiny elements
readxl
)
#FUNCTIONS
#-".csv" extension remover, for variable list
csv_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
#-----#
xls_remove <-
function(x){
substr(x, 1, nchar(x)-5)
}
#-----#
#HIGHCHARTER() SCATTERPLOT FORMAT
scplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(., width=80, height=310) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>X: {point.x:.1f}%<br>Y: {point.y:.2f}") %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}/10"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}%"),
lineColor="#ecf0f1") %>%
hc_plotOptions(., scatter=list(color="#db240c"))
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)   #vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, csv_remove)
#removing ".csv" file extension to create variable list, function above
)
xls_dsets <- list.files(path="./Datasets", pattern = "*.xls", full.names = FALSE)   #vector with file names
xls_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xls", full.names = TRUE), read_excel),
lapply(xls_dsets, xls_remove)
)
xls_dsets <- list.files(path="./Datasets", pattern = "*.xls", full.names = FALSE)   #vector with file names
xls_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xls", full.names = TRUE), read_excel),
lapply(xls_dsets, xls_remove)
)
xls_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xls", full.names = TRUE), read_xls),
lapply(xls_dsets, xls_remove)
)
xls_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
xls_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xls", full.names = TRUE), read_xls),
lapply(xls_dsets, xls_remove)
)
