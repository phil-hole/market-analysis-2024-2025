geom_line()
source("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/UNI/Appunti/LAB 1 - Market Analysis/rgraph_lab_requirement.R")
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
tibble(x=1:100, y=x^2) %>%
ggplot(aes(x=x,y=y)) +
geom_line()+
labs(title="BUSO FILIPPO")
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
tibble(x=1:100, y=x^2) %>%
ggplot(aes(x=x,y=y)) +
geom_line()+
labs(title="BUSO FILIPPO")
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
if(!require("eurostat")) install.packages("eurostat")
library("eurostat")
get_eurostat("tps00001", time_format = "num")
df <- get_eurostat("tps00001", time_format = "num")
if(!require("tidyverse")) install.packages("tidyverse")
write_csv(df, "tps00001")
df <-
get_eurostat("tps00001", time_format = "num") %>%
write_csv("tps00001")
df
df <-
write_csv(df, get_eurostat("tps00001", time_format = "num"))
df <- get_eurostat("tps00001", time_format = "num")
df <-  write_csv(df, "tps00001")
View(df)
df <- get_eurostat("tps00001", time_format = "num")
df <-  write_csv(df, "tps00001")
df <-
get_eurostat("tps00001", time_format = "num") %>%
write_csv(., "tps00001")
View(hp_factors)
---
title: "Portugal Market Analysis"
a <- ("ITA", "ITA", "SPA", "POR")
a <- c("ITA", "ITA", "SPA", "POR")
unique(a)
for(i in unique(a)){
print(i)
}
parallel_series_colours <- c("Portugal" = "#db240c", "Italy" = "#046A38", "Spain" = "#FFE900")
parallel_series_colours["Italy"]
library("highchart")
install.packages("highchart")
library("highchart")
hc <- highchart()
data <- data.frame(c("a", "b", "c"), c(1, 2, 3))
data[,1]
data[1,]
data[1]
data[1;1]
data[1,1]
data <- data.frame(c("a", "b", "c"), c(1, 2, 3))
data
data <- data.frame(("a", "b", "c"), (1, 2, 3))
#CLEAN PARALLELS DATASETS
economic_factor_choice <-
c("Nominal GDP", "Consumer Price Index", "Real GDP", "Real GDP Growth Rate", "Unemployment Rate", "Inflation Rate")
# Chunk 1: SETUP
#GENERAL CODE CHUNK SETUP
knitr::opts_chunk$set(echo = FALSE, message=FALSE)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#PACKAGE INSTALLATION AND LOADING
#-the essential packages required to load the document are markdown, knitr, flexdashboard and pacman.
#-the following code checks for their installation, installing them if required, and proceeds
#-to install/load other necessary packages.
if(!require("markdown")) install.packages("markdown")
if(!require("knitr")) install.packages("knitr")
if(!require("flexdashboard")) install.packages("flexdashboard")
if(!require("pacman")) install.packages("pacman")
#--pacman function essential for loading and installing (if not already installed) packages together
pacman::p_load(
knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets,    #--additional customisation for shiny elements
readxl
)
#FUNCTIONS
#-".csv" extension remover, for variable list
ext_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
#-----#
#HIGHCHARTER() SCATTERPLOT FORMAT
scplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(., width=80, height=310) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>X: {point.x:.1f}%<br>Y: {point.y:.2f}") %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}/10"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}%"),
lineColor="#ecf0f1") %>%
hc_plotOptions(., scatter=list(color="#db240c"))
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)
#vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, ext_remove)
#removing ".csv" file extension to create variable list, function above
)
#same concept reapplied for xlsx files, useful to separate the two
xlsx_dsets <- list.files(path="./Datasets", pattern = "*.xlsx", full.names = FALSE)
xlsx_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE), read_xlsx),
lapply(xlsx_dsets, ext_remove)
)
#final dsets vectors contains variables associated w/ respective dataset:
#-global edits done to reduce variable names, since discarded data not required.
#-method flexible to increases, decreases or variations in order to dataset directory.
View(xlsx_dsets)
View(xlsx_dsets$portugal_retail_volume_price.)
View(xlsx_dsets$portugal_company_shares.)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares."]]
#same concept reapplied for xlsx files, useful to separate the two
xlsx_dsets <- list.files(path="./Datasets", pattern = "*.xlsx", full.names = FALSE)
xlsx_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE), read_xlsx),
lapply(xlsx_dsets, xls_remove)
)
xls_remove <-
function(x){
substr(x, 1, nchar(x)-5)
}
xlsx_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE), read_xlsx),
lapply(xlsx_dsets, xls_remove)
)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]]
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]] %>%
select(-Country, -Category, -Unit)
View(clean_company_shares)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]]
View(clean_company_shares)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
group_by(`Data Type`)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
pivot_longer(
cols = c(-Country, -Category, -`Data Type`, -Unit, -`Current Constant P`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
pivot_longer(
cols = c(-Geography, -Category, -`Data Type`, -Unit, -`Current Constant P`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
)
View(clean_volume_price)
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
filter(-Category, -Unit, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
filter(-Category, -Unit, -`Current Constant P`)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]]
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
filter(-Category, -Unit, -`Current Constant P`)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
filter(-`Category`, -`Unit`, -`Current Constant P`)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(Ratio = `Retail Value RSP` / `Retail Volume (Tonnes)`)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`)
View(clean_volume_price)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`) %>%
split(Geography)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`) %>%
split(., clean_volume_price$Geography)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]] %>%
select(-Country, -Category, -Unit)
clean_volume_price$Portugal %>%
hchart("line", hcaes(`Retail Volume (Tonnes)`, `Retail Value RSP`))
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`) %>%
split(., clean_volume_price$Geography)
# Chunk 1: SETUP
#GENERAL CODE CHUNK SETUP
knitr::opts_chunk$set(echo = FALSE, message=FALSE)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#PACKAGE INSTALLATION AND LOADING
#-the essential packages required to load the document are markdown, knitr, flexdashboard and pacman.
#-the following code checks for their installation, installing them if required, and proceeds
#-to install/load other necessary packages.
if(!require("markdown")) install.packages("markdown")
if(!require("knitr")) install.packages("knitr")
if(!require("flexdashboard")) install.packages("flexdashboard")
if(!require("pacman")) install.packages("pacman")
#--pacman function essential for loading and installing (if not already installed) packages together
pacman::p_load(
knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets,    #--additional customisation for shiny elements
readxl
)
#FUNCTIONS
#-".csv" extension remover, for variable list
ext_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
xls_remove <-
function(x){
substr(x, 1, nchar(x)-5)
}
#-----#
#HIGHCHARTER() SCATTERPLOT FORMAT
scplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(., width=80, height=310) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>X: {point.x:.1f}%<br>Y: {point.y:.2f}") %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}/10"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}%"),
lineColor="#ecf0f1") %>%
hc_plotOptions(., scatter=list(color="#db240c"))
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)
#vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, ext_remove)
#removing ".csv" file extension to create variable list, function above
)
#same concept reapplied for xlsx files, useful to separate the two
xlsx_dsets <- list.files(path="./Datasets", pattern = "*.xlsx", full.names = FALSE)
xlsx_dsets <-
setNames(
lapply(list.files(path="./Datasets", pattern = "*.xlsx", full.names = TRUE), read_xlsx),
lapply(xlsx_dsets, xls_remove)
)
#final dsets vectors contains variables associated w/ respective dataset:
#-global edits done to reduce variable names, since discarded data not required.
#-method flexible to increases, decreases or variations in order to dataset directory.
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`) %>%
split(., clean_volume_price$Geography)
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`)
split(., clean_volume_price$Geography)
clean_volume_price <-
clean_volume_price %>%
split(., clean_volume_price$Geography)
View(clean_volume_price)
clean_company_shares <-
xlsx_dsets[["portugal_company_shares"]] %>%
select(-Country, -Category, -Unit)
clean_volume_price$Portugal
View(clean_volume_price)
#CLEAN SUPPLY DATASETS
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`)
#CLEAN SUPPLY DATASETS
clean_volume_price <-
xlsx_dsets[["portugal_retail_volume_price"]] %>%
select(-`Category`, -`Unit`, -`Current Constant P`) %>%
pivot_longer(
cols = c(-Geography,  -`Data Type`),
names_to = "Year", # Create a Year column from column names
values_to = "Value" # Place data values in the Value column
) %>%
pivot_wider(names_from = `Data Type`, values_from = Value) %>%
mutate(`Price/Volume Ratio` = `Retail Value RSP` / `Retail Volume (Tonnes)`)
View(clean_volume_price)
View(clean_volume_price)
