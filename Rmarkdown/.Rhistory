mutate(Exit = substr(Exit, 11, length(Exit)))
is.duration(hours[2, 2])
hours <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = substr(Entry, 11, length(Entry))) %>%
mutate(Exit = substr(Exit, 11, length(Exit))) %>%
mutate(Entry = as_datetime(Entry))
View(hours)
hours <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = substr(Entry, 11, length(Entry))) %>%
mutate(Exit = substr(Exit, 11, length(Exit)))
hours <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = as.int(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = as.int(substr(Exit, 11, length(Exit))))
hours <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = (substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = (substr(Exit, 11, length(Exit))))
hours <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
View(hours)
hours[2, 2] - hours[2, 3]
hours[2, 3] - hours[2, 2]
hours[2, 3]
hours[2, 2]
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
turni <-
ore %>%
mutate(daily = Exit - Entry)
View(turni)
turni <-
ore %>%
mutate(daily = abs(as.duration(Exit - Entry)))
turni <-
ore %>%
mutate(daily = abs(as.duration(Exit - Entry)))
View(ore)
View(turni)
else mutate(daily = abs(as.duration(Exit - Entry)))
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(Exit - Entry)),
Entry < Exit ~ abs(as.duration(24 - Entry)) + as.duration(Exit)
))
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
View(ore)
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(24 - Entry)) + as.duration(Exit),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
View(turni)
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(24 - Entry)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
View(turni)
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(24H 0M 0S - Entry)),
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms(24H 0M 0S) - Entry)),
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms(24) - Entry)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
View(turni)
hms(24)
hms(24H)
hms("24H")
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
hms("24:00:00")
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
))
View(turni)
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
) %>%
select(!is.na())
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
) %>%
complete.cases()
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
) %>%
select(complete.cases())
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
) %>%
select(complete.cases())
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
) %>%
select(complete.cases())
ore <-
read_excel("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Work/PLATYS_ESTATE_2024.xlsx") %>%
mutate(Entry = hms(substr(Entry, 11, length(Entry)))) %>%
mutate(Exit = hms(substr(Exit, 11, length(Exit))))
View(ore)
turni <-
ore %>%
mutate(daily = case_when(
Entry > Exit ~ abs(as.duration(hms("24:00:00") - Entry) + as.duration(Exit)),
Entry < Exit ~ abs(as.duration(Exit - Entry))
)
)
View(turni)
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
source("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/UNI/Appunti/LAB 1 - Market Analysis/rgraph_lab_requirement.R")
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
tibble(x=1:100, y=x^2) %>%
ggplot(aes(x=x,y=y)) +
geom_line()+
labs(title="BUSO FILIPPO")
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
tibble(x=1:100, y=x^2) %>%
ggplot(aes(x=x,y=y)) +
geom_line()+
labs(title="BUSO FILIPPO")
tibble(x=1:100, y=x^3) %>%
ggplot(aes(x=x, y=y)) +
geom_line()
if(!require("eurostat")) install.packages("eurostat")
library("eurostat")
get_eurostat("tps00001", time_format = "num")
df <- get_eurostat("tps00001", time_format = "num")
if(!require("tidyverse")) install.packages("tidyverse")
write_csv(df, "tps00001")
df <-
get_eurostat("tps00001", time_format = "num") %>%
write_csv("tps00001")
df
df <-
write_csv(df, get_eurostat("tps00001", time_format = "num"))
df <- get_eurostat("tps00001", time_format = "num")
df <-  write_csv(df, "tps00001")
View(df)
df <- get_eurostat("tps00001", time_format = "num")
df <-  write_csv(df, "tps00001")
df <-
get_eurostat("tps00001", time_format = "num") %>%
write_csv(., "tps00001")
View(hp_factors)
---
title: "Portugal Market Analysis"
#GENERAL CODE CHUNK SETUP
knitr::opts_chunk$set(echo = FALSE, message=FALSE)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#PACKAGE INSTALLATION AND LOADING
#-the essential packages required to load the document are markdown, knitr, flexdashboard and pacman.
#-the following code checks for their installation, installing them if required, and proceeds
#-to install/load other necessary packages.
if(!require("markdown")) install.packages("markdown")
if(!require("knitr")) install.packages("knitr")
if(!require("flexdashboard")) install.packages("flexdashboard")
if(!require("pacman")) install.packages("pacman")
#--pacman function essential for loading and installing (if not already installed) packages together
pacman::p_load(
knitr,           #--essential for rmarkdown document modification
tidyverse,       #--contains ggplot2, readr, tibble, dplyr, magrittr
reactable,       #--for creation of large tables
janitor,         #--manipulation, summarisation of messy data, plus duplicate detection
inspectdf,       #--dataframe inspection, relative to value (used in dataset analysis)
highcharter,     #--interactive data visualisation
htmltools,       #--website page options (zoom, scrolling)
collapsibleTree, #--for happiness factor collapsible tree
broom,           #--needed to convert linear model for interpolation line into dataframe
dygraphs,        #--package for time series model creation
xts,             #--data format required by dygraphs
shiny,           #--"runtime: shiny" in JMAL header already loads the library, useful for debugging w/o                       knitting
shinyWidgets     #--additional customisation for shiny elements
)
#FUNCTIONS
#-".csv" extension remover, for variable list
csv_remove <-
function(x){
substr(x, 1, nchar(x)-4)
}
#-----#
#HIGHCHARTER() SCATTERPLOT FORMAT
scplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(., width=80, height=310) %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>X: {point.x:.1f}%<br>Y: {point.y:.2f}") %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}/10"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}%"),
lineColor="#ecf0f1") %>%
hc_plotOptions(., scatter=list(color="#db240c"))
}
#-----#
#HIGHCHARTER LINE CHART FORMAT
lnplot_custom <- function(x){
x %>%
hc_title(style=list(
fontWeight="bold",
fontSize= "15px",
fontFamily= "Lato"
)
) %>%
hc_size(width = NULL, height = 350) %>%
hc_yAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_xAxis(
type="linear",
lineWidth=5,
labels=list(format="{value}"),
lineColor="#ecf0f1") %>%
hc_tooltip(.,
headerFormat = "",
pointFormat =
"<b>{point.name}</b><br>
Year: {point.x:.f}<br>Population: {point.y:.f}") %>%
hc_plotOptions(.,line=list(color="#db240c"))
}
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#DATA IMPORTING
#when downloading the file, the working directory should automatically set to the path where the Markdown file is saved. if that does not occur, copy the Markdown from the dropdown menu between the "" and run the single line of code.
setwd("C:/Users/busop/All Files - ORIGINAL FILES OF DESKTOP LINKS/Github/market-analysis-2024-2025/Rmarkdown")
dsets <- list.files(path="./Datasets", pattern = "*.csv", full.names = FALSE)   #vector with file names
dsets <-
#assign the value contained in each dataset to its respective name
setNames(
lapply(list.files(path= "./Datasets", pattern="*.csv", full.names = TRUE), read.csv),
#reading each csv file, same code as dsets w/ exception that it takes full file path rather than just the name
lapply(dsets, csv_remove)
#removing ".csv" file extension to create variable list, function above
)
#final dsets vector contains variables associated w/ respective dataset:
#-global edits done to reduce variable names, since discarded data not required.
#-method flexible to increases, decreases or variations in order to dataset directory.
parallels_population <-
dsets[["portugal_population"]]
parallels_population <-
dsets[["portugal_population"]] %>%
filter(Year >= 1800 & Entity %in% pickerIp_choice) %>%
select(-Code, -Entity) %>%
rename(`Population` = Population..historical.)
pickerIp_choice <- c("Population", "Life Expectancy", "GDP per Capita")
radioBn_choice <- c("Portugal", "Italy", "Spain")
parallels_population <-
dsets[["portugal_population"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code, -Entity) %>%
rename(`Population` = Population..historical.)
parallels_population <-
dsets[["portugal_population"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`Population` = Population..historical.)
parallels_gdp <-
dsets[[portugal_gdp_per_capita]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`GDP per capita` = GDP.per.capita..PPP..constant.2017.international...)
parallels_gdp <-
dsets[["portugal_gdp_per_capita"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`GDP per capita` = GDP.per.capita..PPP..constant.2017.international...)
parallels_graph_code <- list(parallels_population, parallels_gdp)
parallels_graph_choice[(length(parallels_graph_choice)- 1)]
parallels_graph_choice[(length(parallels_graph_choice)- 1)]
parallels_graph_code[(length(parallels_graph_code)- 1)]
pickerIp_choice <- c("Population", "Life Expectancy", "GDP per Capita")
radioBn_choice <- c("Portugal", "Italy", "Spain")
parallels_population <-
dsets[["portugal_population"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`Population` = Population..historical.)
parallels_gdp <-
dsets[["portugal_gdp_per_capita"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`GDP per capita` = GDP.per.capita..PPP..constant.2017.international...)
parallels_graph_code <- list(parallels_population, parallels_gdp)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#UI AND SERVER LOGIC
parallels_graph_ui <-
fluidPage({
sidebarLayout(
sidebarPanel(
width = 4,
pickerInput(
inputId = "parallels_selection",
label = "Comparison Factor",
choices = pickerIp_choice,
selected = pickerIp_choice[1],
options = list(style = "btn-danger"),
width = "100%"
),
uiOutput(outputId = "parallels_radioB")
),
mainPanel(
width = 8,
highchartOutput(outputId = "parallels_highchart")
),
position = c("left", "right")
)
})
parallels_graph_server <- function(input, output){
parallels_graph_choice <- reactive({
if(input$parallels_selection == pickerIp_choice[1]){
parallels_graph_code[1]
} else if(input$parallels_selection == pickerIp_choice[2]){
parallels_graph_code[2]
}
else{
parallels_graph_code[(length(parallels_graph_code))]
}
})
output$parallels_radioB <- renderUI({
req(input$parallels_selection)
radioButtons(inputId = "radioB_specifics",
choices = radioBn_choice,
selected = radioBn_choice[1])
})
parallels_filtered_data <-
reactive({
if(input$parallels_selection == pickerIp_choice[1]){
parallels_graph_choice() %>%
filter(Entity %in% input$radioB_specifics) %>%
reactable(.)
} else if(input$parallels_selection == pickerIp_choice[2]){
parallels_graph_choice() %>%
filter(Entity %in% input$radioB_specifics) %>%
reactable(.)
}
else {
print("End")
}
})
}
parallels_life_expect <-
dsets[["portugal_life_expectancy"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`Life Expectancy` = Period.life.expectancy.at.birth...Sex..all...Age..0)
parallels_graph_code <- list(parallels_population, parallels_life_expect, parallels_gdp)
parallels_graph_code[(length(parallels_graph_code))]
pickerIp_choice <- c("Population", "Life Expectancy", "GDP per Capita")
radioBn_choice <- c("Portugal", "Italy", "Spain")
parallels_population <-
dsets[["portugal_population"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`Population` = Population..historical.)
parallels_life_expect <-
dsets[["portugal_life_expectancy"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`Life Expectancy` = Period.life.expectancy.at.birth...Sex..all...Age..0)
parallels_gdp <-
dsets[["portugal_gdp_per_capita"]] %>%
filter(Year >= 1800 & Entity %in% radioBn_choice) %>%
select(-Code) %>%
rename(`GDP per capita` = GDP.per.capita..PPP..constant.2017.international...)
parallels_graph_code <- list(parallels_population, parallels_life_expect, parallels_gdp)
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-#
#UI AND SERVER LOGIC
parallels_graph_ui <-
fluidPage({
sidebarLayout(
sidebarPanel(
width = 4,
pickerInput(
inputId = "parallels_selection",
label = "Comparison Factor",
choices = pickerIp_choice,
selected = pickerIp_choice[1],
options = list(style = "btn-danger"),
width = "100%"
),
radioButtons(inputId = "radioB_specifics",
label = "Countries Compared",
choices = radioBn_choice,
selected = radioBn_choice[1])
),
mainPanel(
width = 8,
reactableOutput(outputId = "parallels_reactable")
),
position = c("left", "right")
)
})
parallels_graph_server <- function(input, output){
parallels_graph_choice <- reactive({
if(input$parallels_selection == pickerIp_choice[1]){
parallels_graph_code[1]
} else if(input$parallels_selection == pickerIp_choice[2]){
parallels_graph_code[2]
}else{
parallels_graph_code[(length(parallels_graph_code))]
}
})
parallels_filtered_data <-
reactive({
if(input$parallels_selection == pickerIp_choice[1]){
parallels_graph_choice() %>%
filter(Entity %in% input$radioB_specifics) %>%
reactable(.)
} else if(input$parallels_selection == pickerIp_choice[2]){
parallels_graph_choice() %>%
filter(Entity %in% input$radioB_specifics) %>%
reactable(.)
}
else {
print("End")
}
})
output$parallels_reactable <-
parallels_filtered_data()
}
shinyApp(ui = parallels_graph_ui, server = parallels_graph_server)
